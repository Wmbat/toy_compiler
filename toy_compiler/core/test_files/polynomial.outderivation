{non_terminal(start), stop}
{non_terminal(prog), stop}
{non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class {terminal(class), terminal(id), non_terminal(inherit), terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class {terminal(id), non_terminal(inherit), terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL {terminal(id), non_terminal(inherit), terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL {non_terminal(inherit), terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL {non_terminal(inherit), terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL {terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL {terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { {terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { {non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { {non_terminal(visibility), non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public {terminal(public), non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public {non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public {non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public {non_terminal(func_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func {terminal(func), terminal(id), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func {terminal(id), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate {terminal(id), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate {terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( {terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( {non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( {non_terminal(type), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float {terminal(float), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : {terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : {non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : {non_terminal(type), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float {terminal(float), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float {terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; {terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; {non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; {non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; {terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; {terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } {terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; {terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; {non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; {non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class {terminal(class), terminal(id), non_terminal(inherit), terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class {terminal(id), non_terminal(inherit), terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR {terminal(id), non_terminal(inherit), terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR {non_terminal(inherit), terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR {non_terminal(inherit), terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits {terminal(inherits), terminal(id), non_terminal(nested_id), terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL {terminal(id), non_terminal(nested_id), terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL {non_terminal(nested_id), terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL {non_terminal(nested_id), terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL {terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL {terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { {terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { {non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { {non_terminal(visibility), non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private {terminal(private), non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private {non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private {non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private {non_terminal(var_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private {non_terminal(type), terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float {terminal(float), terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float {terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a {terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a {non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a {non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a {terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a {terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; {terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; {non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; {non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; {non_terminal(visibility), non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private {terminal(private), non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private {non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private {non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private {non_terminal(var_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private {non_terminal(type), terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float {terminal(float), terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float {terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b {terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b {non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b {non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b {terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b {terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; {terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; {non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; {non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; {non_terminal(visibility), non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public {terminal(public), non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public {non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public {non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public {non_terminal(func_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func {terminal(func), terminal(id), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func {terminal(id), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build {terminal(id), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build {terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( {terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( {non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( {non_terminal(type), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float {terminal(float), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , {terminal(comma), non_terminal(type), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , {non_terminal(type), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float {terminal(float), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : {terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : {non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : {non_terminal(type), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR {terminal(id), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR {terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; {terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; {non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; {non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; {non_terminal(visibility), non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public {terminal(public), non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public {non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public {non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public {non_terminal(func_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func {terminal(func), terminal(id), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func {terminal(id), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate {terminal(id), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate {terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( {terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( {non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( {non_terminal(type), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float {terminal(float), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : {terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : {non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : {non_terminal(type), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float {terminal(float), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float {terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; {terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; {non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; {non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; {terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; {terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } {terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; {terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; {non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; {non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class {terminal(class), terminal(id), non_terminal(inherit), terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class {terminal(id), non_terminal(inherit), terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC {terminal(id), non_terminal(inherit), terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC {non_terminal(inherit), terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC {non_terminal(inherit), terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits {terminal(inherits), terminal(id), non_terminal(nested_id), terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL {terminal(id), non_terminal(nested_id), terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL {non_terminal(nested_id), terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL {non_terminal(nested_id), terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL {terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL {terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { {terminal(left_brace), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { {non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { {non_terminal(visibility), non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private {terminal(private), non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private {non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private {non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private {non_terminal(var_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private {non_terminal(type), terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float {terminal(float), terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float {terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a {terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a {non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a {non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a {terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a {terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; {terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; {non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; {non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; {non_terminal(visibility), non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private {terminal(private), non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private {non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private {non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private {non_terminal(var_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private {non_terminal(type), terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float {terminal(float), terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float {terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b {terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b {non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b {non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b {terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b {terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; {terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; {non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; {non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; {non_terminal(visibility), non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private {terminal(private), non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private {non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private {non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private {non_terminal(var_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private {non_terminal(type), terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float {terminal(float), terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float {terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c {terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c {non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c {non_terminal(array_size_rept), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c {terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c {terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; {terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; {non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; {non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; {non_terminal(visibility), non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public {terminal(public), non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public {non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public {non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public {non_terminal(func_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func {terminal(func), terminal(id), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func {terminal(id), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build {terminal(id), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build {terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( {terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( {non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( {non_terminal(type), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float {terminal(float), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , {terminal(comma), non_terminal(type), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , {non_terminal(type), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float {terminal(float), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , {terminal(comma), non_terminal(type), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , {non_terminal(type), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float {terminal(float), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : {terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : {non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : {non_terminal(type), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC {terminal(id), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC {terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; {terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; {non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; {non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; {non_terminal(visibility), non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public {terminal(public), non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public {non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public {non_terminal(member_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public {non_terminal(func_decl), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func {terminal(func), terminal(id), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func {terminal(id), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate {terminal(id), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate {terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( {terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( {non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( {non_terminal(type), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float {terminal(float), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : {terminal(colon), non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : {non_terminal(func_decl_tail), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : {non_terminal(type), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float {terminal(float), terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float {terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; {terminal(semi_colon), non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; {non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; {non_terminal(class_decl_body), terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; {terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; {terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } {terminal(right_brace), terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; {terminal(semi_colon), non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; {non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; {non_terminal(class_decl), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; {non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; {non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; {non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; {non_terminal(function), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; {non_terminal(func_head), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func {terminal(func), terminal(id), non_terminal(class_method), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func {terminal(id), non_terminal(class_method), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL {terminal(id), non_terminal(class_method), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL {non_terminal(class_method), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL {non_terminal(class_method), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: {terminal(double_colon), terminal(id), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate {terminal(id), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate {terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( {terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( {non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( {non_terminal(type), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float {terminal(float), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : {terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : {non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : {non_terminal(type), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float {terminal(float), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float {non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float {non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float {non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { {terminal(left_brace), non_terminal(block_variable_decl), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { {non_terminal(block_variable_decl), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { {non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { {non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { {non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { {non_terminal(statement), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return {terminal(return), terminal(left_paren), non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return {terminal(left_paren), non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( {terminal(left_paren), non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( {non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( {non_terminal(arith_expr), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 {terminal(integer_lit), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 {non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 {terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) {terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; {non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; {terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; {terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } {terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } {non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } {non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } {non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } {non_terminal(function), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } {non_terminal(func_head), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func {terminal(func), terminal(id), non_terminal(class_method), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func {terminal(id), non_terminal(class_method), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR {terminal(id), non_terminal(class_method), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR {non_terminal(class_method), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR {non_terminal(class_method), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: {terminal(double_colon), terminal(id), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate {terminal(id), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate {terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( {terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( {non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( {non_terminal(type), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float {terminal(float), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : {terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : {non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : {non_terminal(type), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float {terminal(float), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float {non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float {non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float {non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { {terminal(left_brace), non_terminal(block_variable_decl), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { {non_terminal(block_variable_decl), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var {terminal(var), terminal(left_brace), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { {terminal(left_brace), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { {non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { {non_terminal(var_decl), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { {non_terminal(type), terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float {terminal(float), terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float {terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result {terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result {non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result {non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result {terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result {terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; {terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; {non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; {non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; {terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } {terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } {non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } {non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } {non_terminal(statement), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } {non_terminal(func_or_assign_stat), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result {terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result {non_terminal(indice_rep), non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result {non_terminal(assign_stat_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result {non_terminal(assign_op), non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = {terminal(assign), non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = {non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = {non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = {non_terminal(arith_expr), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 {terminal(float_lit), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 {non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; {non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; {non_terminal(statement), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; {non_terminal(func_or_assign_stat), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result {terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result {non_terminal(indice_rep), non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result {non_terminal(assign_stat_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result {non_terminal(assign_op), non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = {terminal(assign), non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = {non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = {non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = {non_terminal(arith_expr), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a {non_terminal(mult_op), non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * {terminal(mult), non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x {non_terminal(add_op), non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + {terminal(plus), non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b {non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; {non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; {non_terminal(statement), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return {terminal(return), terminal(left_paren), non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return {terminal(left_paren), non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( {terminal(left_paren), non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( {non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( {non_terminal(arith_expr), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result {non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result {terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) {terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; {non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; {terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; {terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } {terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } {non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } {non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } {non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } {non_terminal(function), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } {non_terminal(func_head), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func {terminal(func), terminal(id), non_terminal(class_method), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func {terminal(id), non_terminal(class_method), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC {terminal(id), non_terminal(class_method), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC {non_terminal(class_method), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC {non_terminal(class_method), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: {terminal(double_colon), terminal(id), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate {terminal(id), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate {terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( {terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( {non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( {non_terminal(type), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float {terminal(float), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : {terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : {non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : {non_terminal(type), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float {terminal(float), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float {non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float {non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float {non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { {terminal(left_brace), non_terminal(block_variable_decl), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { {non_terminal(block_variable_decl), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var {terminal(var), terminal(left_brace), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { {terminal(left_brace), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { {non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { {non_terminal(var_decl), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { {non_terminal(type), terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float {terminal(float), terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float {terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result {terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result {non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result {non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result {terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result {terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; {terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; {non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; {non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; {terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } {terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } {non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } {non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } {non_terminal(statement), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } {non_terminal(func_or_assign_stat), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result {terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result {non_terminal(indice_rep), non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result {non_terminal(assign_stat_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result {non_terminal(assign_op), non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = {terminal(assign), non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = {non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = {non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = {non_terminal(arith_expr), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a {non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; {non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; {non_terminal(statement), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; {non_terminal(func_or_assign_stat), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result {terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result {non_terminal(indice_rep), non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result {non_terminal(assign_stat_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result {non_terminal(assign_op), non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = {terminal(assign), non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = {non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = {non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = {non_terminal(arith_expr), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result {non_terminal(mult_op), non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * {terminal(mult), non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x {non_terminal(add_op), non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + {terminal(plus), non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b {non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; {non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; {non_terminal(statement), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; {non_terminal(func_or_assign_stat), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result {terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result {non_terminal(indice_rep), non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result {non_terminal(assign_stat_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result {non_terminal(assign_op), non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = {terminal(assign), non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = {non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = {non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = {non_terminal(arith_expr), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result {non_terminal(mult_op), non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * {terminal(mult), non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x {non_terminal(add_op), non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + {terminal(plus), non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c {non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; {non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; {non_terminal(statement), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return {terminal(return), terminal(left_paren), non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return {terminal(left_paren), non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( {terminal(left_paren), non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( {non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( {non_terminal(arith_expr), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result {non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result {terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) {terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; {non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; {terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; {terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } {terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } {non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } {non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } {non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } {non_terminal(function), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } {non_terminal(func_head), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func {terminal(func), terminal(id), non_terminal(class_method), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func {terminal(id), non_terminal(class_method), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR {terminal(id), non_terminal(class_method), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR {non_terminal(class_method), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR {non_terminal(class_method), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: {terminal(double_colon), terminal(id), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build {terminal(id), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build {terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( {terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( {non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( {non_terminal(type), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float {terminal(float), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , {terminal(comma), non_terminal(type), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , {non_terminal(type), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float {terminal(float), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : {terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : {non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : {non_terminal(type), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR {terminal(id), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR {non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR {non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR {non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { {terminal(left_brace), non_terminal(block_variable_decl), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { {non_terminal(block_variable_decl), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var {terminal(var), terminal(left_brace), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { {terminal(left_brace), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { {non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { {non_terminal(var_decl), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { {non_terminal(type), terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR {terminal(id), terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR {terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function {terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function {non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function {non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function {terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function {terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; {terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; {non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; {non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; {terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } {terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } {non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } {non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } {non_terminal(statement), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } {non_terminal(func_or_assign_stat), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function {terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function {non_terminal(indice_rep), non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . {terminal(dot), terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . {terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a {terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a {non_terminal(indice_rep), non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a {non_terminal(assign_stat_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a {non_terminal(assign_op), non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = {terminal(assign), non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = {non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = {non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = {non_terminal(arith_expr), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A {non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; {non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; {non_terminal(statement), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; {non_terminal(func_or_assign_stat), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function {terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function {non_terminal(indice_rep), non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . {terminal(dot), terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . {terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b {terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b {non_terminal(indice_rep), non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b {non_terminal(assign_stat_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b {non_terminal(assign_op), non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = {terminal(assign), non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = {non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = {non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = {non_terminal(arith_expr), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B {non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; {non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; {non_terminal(statement), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return {terminal(return), terminal(left_paren), non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return {terminal(left_paren), non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( {terminal(left_paren), non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( {non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( {non_terminal(arith_expr), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function {non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function {terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) {terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; {non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; {terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; {terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } {terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } {non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } {non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } {non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } {non_terminal(function), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } {non_terminal(func_head), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func {terminal(func), terminal(id), non_terminal(class_method), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func {terminal(id), non_terminal(class_method), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC {terminal(id), non_terminal(class_method), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC {non_terminal(class_method), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC {non_terminal(class_method), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: {terminal(double_colon), terminal(id), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build {terminal(id), terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build {terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( {terminal(left_paren), non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( {non_terminal(f_params), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( {non_terminal(type), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float {terminal(float), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , {terminal(comma), non_terminal(type), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , {non_terminal(type), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float {terminal(float), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , {terminal(comma), non_terminal(type), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , {non_terminal(type), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float {terminal(float), terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C {terminal(id), non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C {non_terminal(array_size_rept), non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C {non_terminal(f_params_tail), terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) {terminal(right_paren), terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : {terminal(colon), non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : {non_terminal(func_decl_tail), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : {non_terminal(type), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC {terminal(id), non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC {non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC {non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC {non_terminal(func_body), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { {terminal(left_brace), non_terminal(block_variable_decl), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { {non_terminal(block_variable_decl), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var {terminal(var), terminal(left_brace), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { {terminal(left_brace), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { {non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { {non_terminal(var_decl), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { {non_terminal(type), terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC {terminal(id), terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC {terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function {terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function {non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function {non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function {terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function {terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; {terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; {non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; {non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; {terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } {terminal(right_brace), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } {non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } {non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } {non_terminal(statement), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } {non_terminal(func_or_assign_stat), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function {terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function {non_terminal(indice_rep), non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . {terminal(dot), terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . {terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a {terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a {non_terminal(indice_rep), non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a {non_terminal(assign_stat_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a {non_terminal(assign_op), non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = {terminal(assign), non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = {non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = {non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = {non_terminal(arith_expr), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A {non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; {non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; {non_terminal(statement), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; {non_terminal(func_or_assign_stat), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function {terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function {non_terminal(indice_rep), non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . {terminal(dot), terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . {terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b {terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b {non_terminal(indice_rep), non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b {non_terminal(assign_stat_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b {non_terminal(assign_op), non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = {terminal(assign), non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = {non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = {non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = {non_terminal(arith_expr), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B {non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; {non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; {non_terminal(statement), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; {non_terminal(func_or_assign_stat), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function {terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function {non_terminal(indice_rep), non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . {terminal(dot), terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . {terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c {terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c {non_terminal(indice_rep), non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c {non_terminal(assign_stat_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c {non_terminal(assign_op), non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = {terminal(assign), non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = {non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = {non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = {non_terminal(arith_expr), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C {non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; {non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; {non_terminal(statement), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return {terminal(return), terminal(left_paren), non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return {terminal(left_paren), non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( {terminal(left_paren), non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( {non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( {non_terminal(arith_expr), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function {non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function {terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) {terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; {non_terminal(statement_list), terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; {terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; {terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } {terminal(right_brace), non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } {non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } {non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } {non_terminal(func_def), terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } {terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } {terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main {terminal(main), non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main {non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main {non_terminal(func_body), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { {terminal(left_brace), non_terminal(block_variable_decl), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { {non_terminal(block_variable_decl), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var {terminal(var), terminal(left_brace), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { {terminal(left_brace), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { {non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { {non_terminal(var_decl), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { {non_terminal(type), terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear {terminal(id), terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear {terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 {terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 {non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 {non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 {terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 {terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; {terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; {non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; {non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; {non_terminal(var_decl), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; {non_terminal(type), terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic {terminal(id), terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic {terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 {terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 {non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 {non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 {terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 {terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; {terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; {non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; {non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; {non_terminal(var_decl), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; {non_terminal(type), terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer {terminal(integer), terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer {terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter {terminal(id), non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter {non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter {non_terminal(array_size_rept), terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter {terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter {terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; {terminal(semi_colon), non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; {non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; {non_terminal(var_decl_rep), terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; {terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } {terminal(right_brace), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } {non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } {non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } {non_terminal(statement), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } {non_terminal(func_or_assign_stat), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 {terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 {non_terminal(indice_rep), non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 {non_terminal(assign_stat_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 {non_terminal(assign_op), non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = {terminal(assign), non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = {non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = {non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = {non_terminal(arith_expr), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . {terminal(dot), terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( {terminal(left_paren), non_terminal(a_params), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( {non_terminal(a_params), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( {non_terminal(expr), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( {non_terminal(arith_expr), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 {terminal(integer_lit), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 {non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 {non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 {non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , {terminal(comma), non_terminal(expr), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , {non_terminal(expr), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , {non_terminal(arith_expr), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 {terminal(float_lit), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 {non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 {non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 {non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 {terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) {terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) {non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; {non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; {non_terminal(statement), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; {non_terminal(func_or_assign_stat), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 {terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 {non_terminal(indice_rep), non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 {non_terminal(assign_stat_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 {non_terminal(assign_op), non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = {terminal(assign), non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = {non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = {non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = {non_terminal(arith_expr), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . {terminal(dot), terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( {terminal(left_paren), non_terminal(a_params), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( {non_terminal(a_params), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( {non_terminal(expr), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( {non_terminal(arith_expr), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( {non_terminal(sign), non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - {terminal(minus), non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 {terminal(float_lit), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 {non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 {non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 {non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , {terminal(comma), non_terminal(expr), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , {non_terminal(expr), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , {non_terminal(arith_expr), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 {terminal(float_lit), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 {non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 {non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 {non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , {terminal(comma), non_terminal(expr), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , {non_terminal(expr), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , {non_terminal(arith_expr), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 {terminal(float_lit), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 {non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 {non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 {non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 {terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) {terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) {non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; {non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; {non_terminal(statement), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; {non_terminal(func_or_assign_stat), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter {terminal(id), non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter {non_terminal(func_or_assign_stat_idnest), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter {non_terminal(indice_rep), non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter {non_terminal(func_or_assign_stat_idnest_var_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter {non_terminal(assign_stat_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter {non_terminal(assign_op), non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = {terminal(assign), non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = {non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = {non_terminal(expr), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = {non_terminal(arith_expr), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 {terminal(integer_lit), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 {non_terminal(expr_tail), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; {non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; {non_terminal(statement), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while {terminal(while), terminal(left_paren), non_terminal(expr), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while {terminal(left_paren), non_terminal(expr), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( {terminal(left_paren), non_terminal(expr), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( {non_terminal(expr), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( {non_terminal(arith_expr), non_terminal(expr_tail), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter {non_terminal(expr_tail), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter {non_terminal(relop), non_terminal(arith_expr), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= {terminal(less_equal_than), non_terminal(arith_expr), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= {non_terminal(arith_expr), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= {non_terminal(arith_expr), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= {non_terminal(term), non_terminal(arith_expr_tail), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 {terminal(integer_lit), non_terminal(term_tail), non_terminal(arith_expr_tail), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 {non_terminal(term_tail), non_terminal(arith_expr_tail), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 {non_terminal(term_tail), non_terminal(arith_expr_tail), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 {non_terminal(arith_expr_tail), terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 {terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) {terminal(right_paren), non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) {non_terminal(stat_block), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { {terminal(left_brace), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { {non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { {non_terminal(statement), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write {terminal(write), terminal(left_paren), non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write {terminal(left_paren), non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( {terminal(left_paren), non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( {non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( {non_terminal(arith_expr), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter {non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter {terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) {terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; {non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; {non_terminal(statement), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write {terminal(write), terminal(left_paren), non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write {terminal(left_paren), non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( {terminal(left_paren), non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( {non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( {non_terminal(arith_expr), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . {terminal(dot), terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( {terminal(left_paren), non_terminal(a_params), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( {non_terminal(a_params), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( {non_terminal(expr), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( {non_terminal(arith_expr), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter {non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter {non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter {non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter {terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) {terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) {non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) {terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) {terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; {non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; {non_terminal(statement), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write {terminal(write), terminal(left_paren), non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write {terminal(left_paren), non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( {terminal(left_paren), non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( {non_terminal(expr), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( {non_terminal(arith_expr), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . {terminal(dot), terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( {terminal(left_paren), non_terminal(a_params), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( {non_terminal(a_params), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( {non_terminal(expr), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( {non_terminal(arith_expr), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( {non_terminal(term), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( {non_terminal(factor), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( {non_terminal(func_or_var), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter {terminal(id), non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter {non_terminal(func_or_var_idnest), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter {non_terminal(indice_rep), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter {non_terminal(arith_expr_tail), non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter {non_terminal(expr_tail), non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter {non_terminal(a_params_tail), terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter {terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) {terminal(right_paren), non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) {non_terminal(func_or_var_idnest_tail), non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) {non_terminal(term_tail), non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) {non_terminal(arith_expr_tail), non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) {non_terminal(expr_tail), terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) {terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) {terminal(right_paren), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ; {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ; {non_terminal(statement_list), terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ; {terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ; } {terminal(right_brace), terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ; } {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ; } {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ; } {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ; } ; {terminal(semi_colon), non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ; } ; {non_terminal(statement_list), terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ; } ; {terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ; } ; {terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ; } ; } {terminal(right_brace), stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ; } ; } {stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ; } ; } {stop}
class POLYNOMIAL { public func evaluate ( float x ) : float ; } ; class LINEAR inherits POLYNOMIAL { private float a ; private float b ; public func build ( float A , float B ) : LINEAR ; public func evaluate ( float x ) : float ; } ; class QUADRATIC inherits POLYNOMIAL { private float a ; private float b ; private float c ; public func build ( float A , float B , float C ) : QUADRATIC ; public func evaluate ( float x ) : float ; } ; func POLYNOMIAL :: evaluate ( float x ) : float { return ( 0 ) ; } func LINEAR :: evaluate ( float x ) : float { var { float result ; } result = 0.0 ; result = a * x + b ; return ( result ) ; } func QUADRATIC :: evaluate ( float x ) : float { var { float result ; } result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } func LINEAR :: build ( float A , float B ) : LINEAR { var { LINEAR new_function ; } new_function . a = A ; new_function . b = B ; return ( new_function ) ; } func QUADRATIC :: build ( float A , float B , float C ) : QUADRATIC { var { QUADRATIC new_function ; } new_function . a = A ; new_function . b = B ; new_function . c = C ; return ( new_function ) ; } main { var { linear f1 ; quadratic f2 ; integer counter ; } f1 = f1 . build ( 2 , 3.5 ) ; f2 = f2 . build ( - 2.0 , 1.0 , 0.0 ) ; counter = 1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ; } ; } {stop}
